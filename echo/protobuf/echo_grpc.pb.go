// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package echo

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EchoGRPCClient is the client API for EchoGRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EchoGRPCClient interface {
	Echo(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Res, error)
}

type echoGRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewEchoGRPCClient(cc grpc.ClientConnInterface) EchoGRPCClient {
	return &echoGRPCClient{cc}
}

func (c *echoGRPCClient) Echo(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Res, error) {
	out := new(Res)
	err := c.cc.Invoke(ctx, "/echo.EchoGRPC/echo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EchoGRPCServer is the server API for EchoGRPC service.
// All implementations must embed UnimplementedEchoGRPCServer
// for forward compatibility
type EchoGRPCServer interface {
	Echo(context.Context, *Req) (*Res, error)
	mustEmbedUnimplementedEchoGRPCServer()
}

// UnimplementedEchoGRPCServer must be embedded to have forward compatible implementations.
type UnimplementedEchoGRPCServer struct {
}

func (UnimplementedEchoGRPCServer) Echo(context.Context, *Req) (*Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Echo not implemented")
}
func (UnimplementedEchoGRPCServer) mustEmbedUnimplementedEchoGRPCServer() {}

// UnsafeEchoGRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EchoGRPCServer will
// result in compilation errors.
type UnsafeEchoGRPCServer interface {
	mustEmbedUnimplementedEchoGRPCServer()
}

func RegisterEchoGRPCServer(s grpc.ServiceRegistrar, srv EchoGRPCServer) {
	s.RegisterService(&EchoGRPC_ServiceDesc, srv)
}

func _EchoGRPC_Echo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EchoGRPCServer).Echo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/echo.EchoGRPC/echo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EchoGRPCServer).Echo(ctx, req.(*Req))
	}
	return interceptor(ctx, in, info, handler)
}

// EchoGRPC_ServiceDesc is the grpc.ServiceDesc for EchoGRPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EchoGRPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "echo.EchoGRPC",
	HandlerType: (*EchoGRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "echo",
			Handler:    _EchoGRPC_Echo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "echo.proto",
}
